{
  "_args": [
    [
      {
        "raw": "mhook@0.1.1",
        "scope": null,
        "escapedName": "mhook",
        "name": "mhook",
        "rawSpec": "0.1.1",
        "spec": "0.1.1",
        "type": "version"
      },
      "D:\\4\\Node\\CommentPage\\node_modules\\mongodbext"
    ]
  ],
  "_from": "mhook@0.1.1",
  "_id": "mhook@0.1.1",
  "_inCache": true,
  "_location": "/mhook",
  "_npmUser": {
    "name": "okv",
    "email": "oleg.poligon@gmail.com"
  },
  "_npmVersion": "1.1.66",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mhook@0.1.1",
    "scope": null,
    "escapedName": "mhook",
    "name": "mhook",
    "rawSpec": "0.1.1",
    "spec": "0.1.1",
    "type": "version"
  },
  "_requiredBy": [
    "/mongodbext"
  ],
  "_resolved": "https://registry.npmjs.org/mhook/-/mhook-0.1.1.tgz",
  "_shasum": "9bac4f062cde423ed0ccd1cddfc6f4c67bdf8ded",
  "_shrinkwrap": null,
  "_spec": "mhook@0.1.1",
  "_where": "D:\\4\\Node\\CommentPage\\node_modules\\mongodbext",
  "author": {
    "name": "Oleg Korobenko",
    "email": "oleg.korobenko@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/okv/mhook/issues"
  },
  "dependencies": {},
  "description": "Middleware like hooks for node.js",
  "devDependencies": {
    "dox": "0.4.3",
    "expect.js": "0.2.0",
    "mocha": "1.9.0"
  },
  "directories": {},
  "dist": {
    "shasum": "9bac4f062cde423ed0ccd1cddfc6f4c67bdf8ded",
    "tarball": "https://registry.npmjs.org/mhook/-/mhook-0.1.1.tgz"
  },
  "homepage": "https://github.com/okv/mhook#readme",
  "keywords": [
    "hook",
    "middlewre",
    "trigger",
    "event"
  ],
  "main": "./lib/mhook",
  "maintainers": [
    {
      "name": "okv",
      "email": "oleg.poligon@gmail.com"
    }
  ],
  "name": "mhook",
  "optionalDependencies": {},
  "readme": "# mhook\n\nMiddleware like hooks for node.js which is useful for building some relations\nbetween entities (ODM, ORM, etc).\n\n\n## Installation\n\n```\nnpm install mhook\n```\n\n\n## Usage\n\nDefine your actions, bind hooks on them, trigger actions.\nWhen you trigger an action all binded hooks will be sequentially executed. \n\n```js\n\nvar Hook = require('mhook').Hook;\n\n\nvar hook = new Hook(['beforeUpdate', 'afterUpdate', 'afterRemove']);\n\n// add some hook\nhook.on('beforeUpdate', function(done) {\n\t// do something, and then say that you done,\n\t// pass error as first argument to done\n\tdone();\n});\n\n// add another hook\nhook.on('beforeUpdate', function(done) {\n\tdone();\n});\n\n// trigger `action` - executes all two hooks\nhook.trigger('beforeUpdate', [], function(err) {\n\t// this function will be called after all\n\t// hooks done or one of them fail\n});\n\n```\n\nfor getting `on` and `trigger` methods to your object you can inherits from `Hook`\n\n\n```js\n\nvar Hook = require('mhook').Hook,\n\tinherits = require('util').inherits;\n\n\nfunction Model() {\n\t// apply parent cunstructor\n\tHook.call(this, ['beforeUpdate', 'afterUpdate', 'afterRemove']);\n}\n\n// inherits from Hook\ninherits(Model, Hook);\n\n// now we can use `on` and `trigger` as own methods\nModel.prototype.update = function(obj, callback) {\n\tthis.trigger('beforeUpdate', [obj], function(err) {\n\t\tif (err) {callback(err); return}\n\t\t// update\n\t\t// trigger afterUpdate, etc\n\t});\n};\n\n\nvar model = new Model();\n\nmodel.on('beforeUpdate', function(obj, done) {\n\tconsole.log('before update object: ', obj);\n\tdone();\n});\n\n```\n\n\n## Api\n\n  - [Hook()](#hook)\n  - [Hook.on()](#hookonactionstringhookfunction)\n  - [Hook.trigger()](#hooktriggeractionstringhookargsarraycallbackfunction)\n\n## Hook()\n\n  Hook constructor\n  \n  accepts array of string `actions` - possible actions which could be used\n  at `on` and `trigger`\n\n## Hook.on(action:String, hook:Function)\n\n  Bind `hook` on `action`\n\n## Hook.trigger(action:String, hookArgs:Array, [callback]:Function)\n\n  Trigger some `action` with `hookArgs` (arguments which will be passed to\n  every hook function).\n  If `callback` (accepts error as first argument) function presents it will be\n  called after hooks execution.\n\n\n## Running test\n\ninto cloned repository run\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/okv/mhook.git"
  },
  "scripts": {
    "mkapidoc": "dox --api < lib/mhook.js",
    "test": "mocha test --reporter spec --bail"
  },
  "version": "0.1.1"
}
